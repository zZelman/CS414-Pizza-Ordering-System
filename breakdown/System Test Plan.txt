After diagramming has been completed, we elected to go with a test first development methodology.
The fundamental ideology is to begin with unit tests.
	These tests will ensure basic logical soundness of all branches of the code.
	We will also endeavour to make sure the inputs are sanity tested with boundary tests, which have the purpose of accepting sane inputs and being capable of dealing with edge cases.
	These will be covered in the testing section 1.
After unit tests have been completed, the next task is to ensure the system functions properly with system tests.
	The ideology behind these tests is so ensure that the system in its entirety is functioning as expected, producing expected results.
	These will be covered in the testing section 2.
	

Testing Section 1.
	These tests are automated, they will not involve entering in physical input, simply running the JUnit test cases we developed for our software.
	These tests are located at CS414-Pizza-Ordering-System/src/test/java
	The tester may simply run the JUnit tests for this section.
		The JUnit testing suites are :
			TestItem
			TestLedger
			TestMenu
			TestSale
			TestPizzaSystem

Testing Section 2.
	These test are non-automated, these will involve the tester physically entering the inputs and actually using the software we have developed.
	These tests will be done with the software running.
		First we will do a system test of the Manager's view of the software via the ManagerGui
			1. The manager must first decide to create a menu.
				The standard input for a menu creation is :name of the menu, description of the menu (for example : "pizza,pizza")
				to accomplish this, the manager types into the text box at the top left of the application and then hits the create menu button
					
			2. The manager must then begin to add items into the system.
				The standard input for a system item creation is :Name,Description,Price (for example : "Cheese,Cheese,2.15")
				To accomplish this, the manager types into the text box at the top left of the application and then hits the create item button
			
			3. The manager must then add an item to the menu he has created with an item he has created.
				The standard input for adding to menu is :Name,Menu Name (for example : "Cheese,Pizza")
				To accomplish this, the manager types into the text box at the top left of the application and then hits the add to menu button
				
			4. The Manager must(if he so chooses) then remove an item from the menu.
				The standard input for removing an item from the menu is : Name,Menu Name (for example : "Cheese,Pizza")
				To accomplish this, the manager types into the text box at the top left of the application and then hits the remove from menu button
					The item the manager wishes to remove from the menu must exist on the menu he wishes to remove it from if he wants something to happen
				
			5. The Manager must(if he so chooses) then delete an item from the list of existing items.
				The standard input for deleting an item from the system is : Name (For example : "Cheese")
				To accomplish this, the manager types into the text box at the top left of the application and then hits the delete item button
					The item the manager wishes to delete must be in the list of existing items if he wishes something to happen
				
			6. The manager must then set a special for the day.
				The standard input for seting a special for the day is : Name,Menu Name (For example "Chesse,Pizza")
			
		Second we will do a system test of a potential customer's view of the software via the KioskGui
		
		Finally we will do a system test of the Chef's view of the software via the ChefGui
		